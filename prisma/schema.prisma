generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?     @map("email_verified")
  hashedPassword String?       @map("hashed_password")
  image          String?       @default("https://gravatar.com/avatar/?d=identicon")
  accounts       Account[]
  sessions       Session[]
  transactions   Transaction[] @relation("UserTransactions")
  watchlist      Watchlist[]   @relation("UserWatchlist")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  coinName    String   @map("coin_name")
  price       Decimal  @map("price")
  purchasedAt DateTime @map("purchased_at")

  user User @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_id_index")
  @@map("transactions")
}

model Watchlist {
  id       String @id @default(cuid())
  userId   String @map("user_id")
  coinName String @map("coin_name")

  user User @relation("UserWatchlist", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, coinName])
  @@index([userId], map: "user_id_index")
  @@map("watchlist")
}
