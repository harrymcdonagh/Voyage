datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

enum TransactionType {
  BUY
  SELL
}

model User {
  id             String    @id @default(cuid())
  name           String?
  username       String?   @unique
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?   @default("https://gravatar.com/avatar/?d=identicon")
  role           String?   @default("user")
  hashedPassword String?   @map("hashed_password")
  accounts       Account[]
  sessions       Session[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  watchlists   Watchlist[]

  @@map("users")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Transaction {
  userId String
  id     String          @id @default(cuid())
  name   String
  amount Float
  price  Float
  symbol String
  value  Float
  date   DateTime
  type   TransactionType

  User User @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Watchlist {
  userId      String
  watchlistId String @id @default(cuid()) @map("watchlist_id")
  coinId      Int

  User User @relation(fields: [userId], references: [id])

  @@map("watchlists")
}
